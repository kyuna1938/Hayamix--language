/* Generated By:JavaCC: Do not edit this line. Hayamix.java */
import java.util.*;
import java.io.*;

/**
 * Macro statements are as follows :
 *   <Main>   ::= "Hayamix" "(" ")" "{" { <Decl> | <State> } "}" EOF
 *   <Decl>   ::= "int" <NAME> { "," <NAME> } ";"
 *   <Name>   ::= ( NAME "[" INTEGER "]" ) | NAME
 *   <State>  ::= <If> | <While> | <Output> | <Assgn> | "{" { <State> } "}"
 *   <If>     ::= "if" "(" <Exp> ")" <State>
 *   <While>  ::= "while" "(" <Exp> ")" <State>
 *   <Output> ::= "outputHayami" "(" <Exp> ")" ";"
 *   <Assgn>  ::= NAME [ "[" <Exp> "]" ) ] "=" <Exp> ";" 
 *   <Exp>    ::= <Term> { ( "+" | "-" ) <Term> }
 *   <Term>   ::= <Factor> { ( "*" | "/" ) <Factor> }
 *   <Factor> ::= ( NAME "[" <Exp> "]") | NAME | INTEGER | "inputHayami" 
 * 
 * Execute as follows :
 * $ javac Hayamix.java
 * $ java Hayamix inputfile
 */
public class Hayamix implements HayamixConstants {
    static VarList VarList;
    static PIseg iseg;

    public static void main (String[] args) {
        VarList = new VarList();
        iseg = new PIseg();
        String fileName = "";
        String extension = "";
        try {
            File f = new File(args[0]);
            fileName = f.getName();
            extension = fileName.substring(fileName.lastIndexOf("."));
            if(!extension.equals(".hayami")){
                System.out.println("You can only use .hayami file");
                return;
            }
            fileName = fileName.substring(0,fileName.lastIndexOf('.')) + ".s";
            Hayamix parser = new Hayamix (new FileReader (f));
            parser.enable_tracing();
            parser.Main();
            System.out.println ("succese hayamix!!");
        } catch (Exception err_mes) {
            System.out.println (err_mes);
        }

        iseg.dump2file(fileName);

    }

/**
 * <Main> ::= "Hayamix" "(" "{" { <Decl> } { <State> } "}" <EOF>
 */
  final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Decl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case OUTPUTINT:
      case NAME:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      State();
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
            iseg.appendCode (Ope.HALT);
  }

/**
 * <Decl> ::= "hayami" <NAME> { "," <NAME> }
 */
  final public void Decl() throws ParseException {
    jj_consume_token(INT);
    Name();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      Name();
    }
    jj_consume_token(SEMICOLON);
  }

/**
 * <Name> ::= ( NAME "[" INTEGER "]" ) | NAME
 */
  final public void Name() throws ParseException {
  String name; int size;
    if (jj_2_1(2)) {
      token = jj_consume_token(NAME);
                         name = token.image;
      jj_consume_token(LBRACKET);
      token = jj_consume_token(INTEGER);
                            size = Integer.parseInt (token.image);
      jj_consume_token(RBRACKET);
              VarList.registerNewVariable (TypeKind.ARRAYOFINT, name, size);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        token = jj_consume_token(NAME);
        name = token.image;
        VarList.registerNewVariable (TypeKind.INT, name, 1);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * <State>  ::= { <If> | <While> | <Output> | <Assgn> | "{" { <State> } "} }
 */
  final public void State() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      If();
      break;
    case WHILE:
      While();
      break;
    case OUTPUTINT:
      Output();
      break;
    case NAME:
      Assgn();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case OUTPUTINT:
        case NAME:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        State();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * <If>     ::= "if" "(" <Exp> ")" <State> 
 */
  final public void If() throws ParseException {
  int beqAddr, nextAddr;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Exp();
            beqAddr = iseg.appendCode (Ope.IF);
    jj_consume_token(RPAREN);
    State();
        nextAddr = iseg.getLastCodeAddress() + 1;
        iseg.replaceCode (beqAddr, nextAddr);
  }

/**
 * <While>  ::= "while" "(" <Exp> ")" <State> 
 */
  final public void While() throws ParseException {
  int expAddr, beqAddr, nextAddr;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
                  expAddr = iseg.getLastCodeAddress() + 1;
    Exp();
            beqAddr = iseg.appendCode (Ope.IF);
    jj_consume_token(RPAREN);
    State();
        nextAddr = iseg.appendCode (Ope.JUMP, expAddr) + 1;
        iseg.replaceCode (beqAddr, nextAddr);
  }

/**
 * <Output> ::= "outputHayami" "(" <Exp> ")" ;
 */
  final public void Output() throws ParseException {
    jj_consume_token(OUTPUTINT);
    jj_consume_token(LPAREN);
    Exp();
            iseg.appendCode (Ope.OUTPUT);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

/**
 * <Assgn>  ::= NAME [ "[" <Exp> "]" ] "=" <Exp> ";"
 */
  final public void Assgn() throws ParseException {
  String name; int addr;
    token = jj_consume_token(NAME);
        name = token.image;
        addr = VarList.getAddress(name);
        iseg.appendCode (Ope.PUSHI, addr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Exp();
      jj_consume_token(RBRACKET);
              iseg.appendCode (Ope.ADD);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ASSGN);
    Exp();
            iseg.appendCode (Ope.ASSGN);
    jj_consume_token(SEMICOLON);
          iseg.appendCode (Ope.REMOVE);
  }

/**
 * <Exp>    ::= <Term> { ( "+" | "-" ) <Term> }
 */
  final public void Exp() throws ParseException {
  Ope opcode;
    Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
                opcode = Ope.ADD;
        break;
      case SUB:
        jj_consume_token(SUB);
                opcode = Ope.SUB;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
                 iseg.appendCode (opcode);
    }
  }

/**
 * <Term>   ::= <Factor> { ( "*" | "/" ) <Factor> }
 */
  final public void Term() throws ParseException {
  Ope opcode;
    Factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
               opcode = Ope.MUL;
        break;
      case DIV:
        jj_consume_token(DIV);
               opcode = Ope.DIV;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
                  iseg.appendCode (opcode);
    }
  }

/**
 * <Factor> ::= ( NAME "[" <Exp> "]" ) | NAME | INTEGER | "inputHayami"
 */
  final public void Factor() throws ParseException {
  int val, addr; String name;
    if (jj_2_2(2)) {
      token = jj_consume_token(NAME);
            name = token.image;
            addr = VarList.getAddress (name);
            iseg.appendCode (Ope.PUSHI, addr);
      jj_consume_token(LBRACKET);
      Exp();
      jj_consume_token(RBRACKET);
            iseg.appendCode (Ope.ADD);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        token = jj_consume_token(NAME);
        name = token.image;
        addr = VarList.getAddress (name);
        iseg.appendCode (Ope.PUSH, addr);
        break;
      case INTEGER:
        token = jj_consume_token(INTEGER);
        val = Integer.parseInt (token.image);
        iseg.appendCode (Ope.PUSHI, val);
        break;
      case INPUTINT:
        jj_consume_token(INPUTINT);
                      iseg.appendCode (Ope.INPUT);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HayamixTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x5300200,0x2000,0x4000000,0x5300200,0x5300200,0x800,0x18000,0x18000,0x60000,0x60000,0x6080000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Hayamix(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Hayamix(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HayamixTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Hayamix(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HayamixTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Hayamix(HayamixTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HayamixTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
